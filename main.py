import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config import TOKEN  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config

API_TOKEN = TOKEN
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
conn = sqlite3.connect('user_data.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS user_data (
                    user_id INTEGER PRIMARY KEY,
                    name TEXT,
                    gender TEXT,
                    city TEXT,
                    role TEXT)''')
conn.commit()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
class Survey(StatesGroup):
    start = State()
    name = State()
    gender = State()
    city = State()
    role = State()
    main_menu = State()
    training_program = State()
    workout_stage = State()


# –ú–∞—Å—Å–∏–≤ —ç—Ç–∞–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
training_stages = [
    {
        "title": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å",
        "content": (
            "1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è ‚Äì 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. [–°–º–æ—Ç—Ä–µ—Ç—å](https://disk.yandex.ru/i/7yDXy-wDJ5ofeg)\n"
            "2. –ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞ ‚Äì 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É. [–°–º–æ—Ç—Ä–µ—Ç—å](https://disk.yandex.ru/i/5-EUO_28YcMo_A)\n"
            "3. Bird Dog ‚Äì 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É. [–°–º–æ—Ç—Ä–µ—Ç—å](https://disk.yandex.ru/i/xWGj17nJ2RKfww)"
        ),
    },
    {
        "title": "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, —ç—Ç–∞–ø 1",
        "content": (
            "4. –ë–µ–≥ —Å –±–∞—Ä—å–µ—Ä–∞–º–∏, –ª–µ–∂–∞ –Ω–∞ –∂–∏–≤–æ—Ç–µ ‚Äì 12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É.\n"
            "5. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –ª–µ–Ω—Ç–æ–π –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π ‚Äì 12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. [–°–º–æ—Ç—Ä–µ—Ç—å](https://disk.yandex.ru/i/Pf8kWkMsqRUJwA)"
        ),
    },
    {
        "title": "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, —ç—Ç–∞–ø 2",
        "content": (
            "6. –ü—Ä—ã–≥–∞—é—â–∏–π –î–∂–µ–∫ (–±–µ–∑ —Ä—É–∫) ‚Äì 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.\n"
            "7. –ü—Ä—ã–≥–∞—é—â–∏–π –î–∂–µ–∫ (—Ä—É–∫–∏ –≤–≤–µ—Ä—Ö) ‚Äì 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.\n"
            "8. –ü–æ–¥—Å–∫–æ–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ —Å –ø—Ä—è–º—ã–º–∏ –Ω–æ–≥–∞–º–∏ ‚Äì 20 —Å–µ–∫—É–Ω–¥.\n"
            "9. –í—ã–ø–∞–¥—ã –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É ‚Äì 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É."
        ),
    },
    {
        "title": "–û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥–≤–æ–¥—è—â–∞—è —á–∞—Å—Ç—å",
        "content": (
            "1. –ë–µ–≥ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å—Ç–æ–ø—ã ‚Äì 10 –º–µ—Ç—Ä–æ–≤. [–°–º–æ—Ç—Ä–µ—Ç—å](https://disk.yandex.ru/i/CtvsdmD_VgQRCQ)\n"
            "2. –ë–µ–≥ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≤—ã–Ω–æ—Å –±–µ–¥—Ä–∞ ‚Äì 20 –º–µ—Ç—Ä–æ–≤.\n"
            "3. –ü—Ä—ã–∂–∫–∏ –Ω–∞ –¥–≤—É—Ö –Ω–æ–≥–∞—Ö —á–µ—Ä–µ–∑ –Ω–µ–≤—ã—Å–æ–∫–∏–µ –±–∞—Ä—å–µ—Ä—ã ‚Äì 5 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. [–°–º–æ—Ç—Ä–µ—Ç—å](https://disk.yandex.ru/i/B4JCsY9gbOUqgw)"
        ),
    },
    {
        "title": "–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å",
        "content": (
            "1. –†–∞—Å—Ç—è–∂–∫–∞ –∫–≤–∞–¥—Ä–∏—Ü–µ–ø—Å–æ–≤ ‚Äì 20-30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É.\n"
            "2. –†–∞—Å—Ç—è–∂–∫–∞ –ø–æ–¥–∫–æ–ª–µ–Ω–Ω—ã—Ö —Å—É—Ö–æ–∂–∏–ª–∏–π ‚Äì 20-30 —Å–µ–∫—É–Ω–¥.\n"
            "3. –†–∞—Å—Ç—è–∂–∫–∞ –∏–∫—Ä–æ–Ω–æ–∂–Ω—ã—Ö –º—ã—à—Ü ‚Äì 20-30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É.\n"
            "4. –†–∞—Å—Ç—è–∂–∫–∞ —è–≥–æ–¥–∏—á–Ω—ã—Ö –º—ã—à—Ü ‚Äì 20-30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É.\n"
            "5. –†–∞—Å—Ç—è–∂–∫–∞ –º—ã—à—Ü —Å–ø–∏–Ω—ã (–ø–æ–∑–∞ —Ä–µ–±–µ–Ω–∫–∞) ‚Äì 20-30 —Å–µ–∫—É–Ω–¥."
        ),
    },
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def send_training_stage(message: types.Message, state: FSMContext, stage_index: int):
    if 0 <= stage_index < len(training_stages):
        stage = training_stages[stage_index]
        await state.update_data(stage_index=stage_index)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —ç—Ç–∞–ø–∞
        await message.answer(
            f"{stage['title']}\n\n{stage['content']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–î–∞–ª–µ–µ"), KeyboardButton(text="–ù–∞–∑–∞–¥")],
                    [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            ),
        )
    else:
        await message.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
            resize_keyboard=True,
            one_time_keyboard=True
        ))
        await state.set_state(Survey.main_menu)


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —É—Å–ª–æ–≤–∏—è
@dp.message(F.text == '/start')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —Å—É–¥–µ–π! "
        "–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ —É–ª—É—á—à–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é.\n\n"
        "–ü—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(Survey.start)


@dp.message(Survey.start, F.text == "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")
async def accept_terms(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Survey.name)


@dp.message(Survey.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöπ –ú—É–∂—Å–∫–æ–π")], [KeyboardButton(text="üö∫ –ñ–µ–Ω—Å–∫–∏–π")]],
        resize_keyboard=True,
        one_time_keyboard=True
    ))
    await state.set_state(Survey.gender)


@dp.message(Survey.gender)
async def process_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(Survey.city)


@dp.message(Survey.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è")], [KeyboardButton(text="–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å—É–¥—å–∏")]],
        resize_keyboard=True,
        one_time_keyboard=True
    ))
    await state.set_state(Survey.role)


@dp.message(Survey.role)
async def process_role(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    cursor.execute(
        "INSERT OR IGNORE INTO user_data (user_id, name, gender, city, role) VALUES (?, ?, ?, ?, ?)",
        (user_id, user_data['name'], user_data['gender'], user_data['city'], message.text))
    conn.commit()

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è")],
            [KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    ))
    await state.set_state(Survey.main_menu)


@dp.message(Survey.main_menu, F.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è")
async def show_training_programs(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å")],
                [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, —ç—Ç–∞–ø 1")],
                [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, —ç—Ç–∞–ø 2")],
                [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥–≤–æ–¥—è—â–∞—è —á–∞—Å—Ç—å")],
                [KeyboardButton(text="–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        ),
    )
    await state.set_state(Survey.training_program)


@dp.message(Survey.training_program, F.text.in_([stage["title"] for stage in training_stages]))
async def start_training_stage(message: types.Message, state: FSMContext):
    stage_index = next(i for i, stage in enumerate(training_stages) if stage["title"] == message.text)
    await send_training_stage(message, state, stage_index)
    await state.set_state(Survey.workout_stage)


@dp.message(Survey.workout_stage, F.text == "–î–∞–ª–µ–µ")
async def next_training_stage(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_stage = data.get("stage_index", 0) + 1
    await send_training_stage(message, state, current_stage)


@dp.message(Survey.workout_stage, F.text == "–ù–∞–∑–∞–¥")
async def previous_training_stage(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_stage = max(data.get("stage_index", 0) - 1, 0)
    await send_training_stage(message, state, current_stage)


@dp.message(Survey.workout_stage, F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def end_training(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å")],
                [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, —ç—Ç–∞–ø 1")],
                [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, —ç—Ç–∞–ø 2")],
                [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥–≤–æ–¥—è—â–∞—è —á–∞—Å—Ç—å")],
                [KeyboardButton(text="–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        ),
    )
    await state.set_state(Survey.training_program)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
