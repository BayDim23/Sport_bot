import logging
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config import TOKEN  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config

API_TOKEN = TOKEN  # –ó–∞–º–µ–Ω–∏—Ç–µ 'TOKEN' –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ config.py
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
conn = sqlite3.connect('user_data.db')
cursor = conn.cursor()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ name –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
try:
    cursor.execute("ALTER TABLE user_data ADD COLUMN name TEXT")
except sqlite3.OperationalError:
    # –°—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    pass

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS user_data (
                    user_id INTEGER PRIMARY KEY,
                    name TEXT,
                    language TEXT,
                    gender TEXT,
                    city TEXT,
                    role TEXT)''')
conn.commit()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
class Survey(StatesGroup):
    start = State()
    name = State()
    language = State()
    gender = State()
    city = State()
    role = State()
    main_menu = State()
    training_program = State()
    speed_training = State()


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —É—Å–ª–æ–≤–∏—è
@dp.message(F.text == '/start')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —Å—É–¥–µ–π! "
        "–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ —É–ª—É—á—à–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é.\n\n"
        "–ü—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(Survey.start)


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
@dp.message(Survey.start, F.text == "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")
async def accept_terms(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Survey.name)


# –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
@dp.message(Survey.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üá¨üáß English")], [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")]],
        resize_keyboard=True,
        one_time_keyboard=True
    ))
    await state.set_state(Survey.language)


# –ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞
@dp.message(Survey.language)
async def process_language(message: types.Message, state: FSMContext):
    await state.update_data(language=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöπ –ú—É–∂—Å–∫–æ–π")], [KeyboardButton(text="üö∫ –ñ–µ–Ω—Å–∫–∏–π")]],
        resize_keyboard=True,
        one_time_keyboard=True
    ))
    await state.set_state(Survey.gender)


# –ó–∞–ø—Ä–æ—Å –ø–æ–ª–∞
@dp.message(Survey.gender)
async def process_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(Survey.city)


# –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞
@dp.message(Survey.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è")], [KeyboardButton(text="–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å—É–¥—å–∏")]],
        resize_keyboard=True,
        one_time_keyboard=True
    ))
    await state.set_state(Survey.role)


# –ó–∞–ø—Ä–æ—Å —Ä–æ–ª–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Survey.role)
async def process_role(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    cursor.execute(
        "INSERT OR IGNORE INTO user_data (user_id, name, language, gender, city, role) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, user_data['name'], user_data['language'], user_data['gender'], user_data['city'], message.text))
    conn.commit()

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"), KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã")],
            [KeyboardButton(text="üß© –®–∞—Ä–∞–¥—ã"), KeyboardButton(text="üìã –¢–µ—Å—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    ))
    await state.set_state(Survey.main_menu)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
@dp.message(Survey.main_menu, F.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è")
async def show_training_programs(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–∫–æ—Ä–æ—Å—Ç—å")],
            [KeyboardButton(text="–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å")],
            [KeyboardButton(text="–°–∏–ª–∞ –∏ –º–æ—â–Ω–æ—Å—Ç—å")],
            [KeyboardButton(text="–ì–∏–±–∫–æ—Å—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    ))
    await state.set_state(Survey.training_program)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@dp.message(Survey.training_program, F.text == "–°–∫–æ—Ä–æ—Å—Ç—å")
async def speed_training(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª '–°–∫–æ—Ä–æ—Å—Ç—å'. –î–æ—Å—Ç—É–ø–µ–Ω —É—Ä–æ–≤–µ–Ω—å 1.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton(text="–ù–µ–¥–µ–ª—è 1")], [KeyboardButton(text="–ù–µ–¥–µ–ª—è 2")]],
                             resize_keyboard=True,
                             one_time_keyboard=True
                         ))
    await state.set_state(Survey.speed_training)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
@dp.message(Survey.speed_training, F.text.in_({"–ù–µ–¥–µ–ª—è 1", "–ù–µ–¥–µ–ª—è 2"}))
async def week_training(message: types.Message, state: FSMContext):
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: \n"
                         "1. –ë–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç\n"
                         "2. –û—Ç–¥—ã—Ö 1 –º–∏–Ω—É—Ç–∞\n"
                         "3. –ü—Ä—ã–∂–∫–∏ —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º 10 —Ä–∞–∑\n\n"
                         "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è")]],
                             resize_keyboard=True,
                             one_time_keyboard=True
                         ))
    await state.set_state(Survey.main_menu)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
